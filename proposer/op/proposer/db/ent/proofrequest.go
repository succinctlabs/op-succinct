// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/succinctlabs/op-succinct-go/proposer/db/ent/proofrequest"
)

// ProofRequest is the model entity for the ProofRequest schema.
type ProofRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type proofrequest.Type `json:"type,omitempty"`
	// StartBlock holds the value of the "start_block" field.
	StartBlock uint64 `json:"start_block,omitempty"`
	// EndBlock holds the value of the "end_block" field.
	EndBlock uint64 `json:"end_block,omitempty"`
	// Status holds the value of the "status" field.
	Status proofrequest.Status `json:"status,omitempty"`
	// RequestAddedTime holds the value of the "request_added_time" field.
	RequestAddedTime uint64 `json:"request_added_time,omitempty"`
	// ProverRequestID holds the value of the "prover_request_id" field.
	ProverRequestID string `json:"prover_request_id,omitempty"`
	// ProofRequestTime holds the value of the "proof_request_time" field.
	ProofRequestTime uint64 `json:"proof_request_time,omitempty"`
	// LastUpdatedTime holds the value of the "last_updated_time" field.
	LastUpdatedTime uint64 `json:"last_updated_time,omitempty"`
	// L1BlockNumber holds the value of the "l1_block_number" field.
	L1BlockNumber uint64 `json:"l1_block_number,omitempty"`
	// L1BlockHash holds the value of the "l1_block_hash" field.
	L1BlockHash string `json:"l1_block_hash,omitempty"`
	// Proof holds the value of the "proof" field.
	Proof        []byte `json:"proof,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProofRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case proofrequest.FieldProof:
			values[i] = new([]byte)
		case proofrequest.FieldID, proofrequest.FieldStartBlock, proofrequest.FieldEndBlock, proofrequest.FieldRequestAddedTime, proofrequest.FieldProofRequestTime, proofrequest.FieldLastUpdatedTime, proofrequest.FieldL1BlockNumber:
			values[i] = new(sql.NullInt64)
		case proofrequest.FieldType, proofrequest.FieldStatus, proofrequest.FieldProverRequestID, proofrequest.FieldL1BlockHash:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProofRequest fields.
func (pr *ProofRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case proofrequest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case proofrequest.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pr.Type = proofrequest.Type(value.String)
			}
		case proofrequest.FieldStartBlock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_block", values[i])
			} else if value.Valid {
				pr.StartBlock = uint64(value.Int64)
			}
		case proofrequest.FieldEndBlock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_block", values[i])
			} else if value.Valid {
				pr.EndBlock = uint64(value.Int64)
			}
		case proofrequest.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pr.Status = proofrequest.Status(value.String)
			}
		case proofrequest.FieldRequestAddedTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field request_added_time", values[i])
			} else if value.Valid {
				pr.RequestAddedTime = uint64(value.Int64)
			}
		case proofrequest.FieldProverRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prover_request_id", values[i])
			} else if value.Valid {
				pr.ProverRequestID = value.String
			}
		case proofrequest.FieldProofRequestTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field proof_request_time", values[i])
			} else if value.Valid {
				pr.ProofRequestTime = uint64(value.Int64)
			}
		case proofrequest.FieldLastUpdatedTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated_time", values[i])
			} else if value.Valid {
				pr.LastUpdatedTime = uint64(value.Int64)
			}
		case proofrequest.FieldL1BlockNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field l1_block_number", values[i])
			} else if value.Valid {
				pr.L1BlockNumber = uint64(value.Int64)
			}
		case proofrequest.FieldL1BlockHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field l1_block_hash", values[i])
			} else if value.Valid {
				pr.L1BlockHash = value.String
			}
		case proofrequest.FieldProof:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field proof", values[i])
			} else if value != nil {
				pr.Proof = *value
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProofRequest.
// This includes values selected through modifiers, order, etc.
func (pr *ProofRequest) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// Update returns a builder for updating this ProofRequest.
// Note that you need to call ProofRequest.Unwrap() before calling this method if this ProofRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *ProofRequest) Update() *ProofRequestUpdateOne {
	return NewProofRequestClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the ProofRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *ProofRequest) Unwrap() *ProofRequest {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProofRequest is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *ProofRequest) String() string {
	var builder strings.Builder
	builder.WriteString("ProofRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pr.Type))
	builder.WriteString(", ")
	builder.WriteString("start_block=")
	builder.WriteString(fmt.Sprintf("%v", pr.StartBlock))
	builder.WriteString(", ")
	builder.WriteString("end_block=")
	builder.WriteString(fmt.Sprintf("%v", pr.EndBlock))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pr.Status))
	builder.WriteString(", ")
	builder.WriteString("request_added_time=")
	builder.WriteString(fmt.Sprintf("%v", pr.RequestAddedTime))
	builder.WriteString(", ")
	builder.WriteString("prover_request_id=")
	builder.WriteString(pr.ProverRequestID)
	builder.WriteString(", ")
	builder.WriteString("proof_request_time=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProofRequestTime))
	builder.WriteString(", ")
	builder.WriteString("last_updated_time=")
	builder.WriteString(fmt.Sprintf("%v", pr.LastUpdatedTime))
	builder.WriteString(", ")
	builder.WriteString("l1_block_number=")
	builder.WriteString(fmt.Sprintf("%v", pr.L1BlockNumber))
	builder.WriteString(", ")
	builder.WriteString("l1_block_hash=")
	builder.WriteString(pr.L1BlockHash)
	builder.WriteString(", ")
	builder.WriteString("proof=")
	builder.WriteString(fmt.Sprintf("%v", pr.Proof))
	builder.WriteByte(')')
	return builder.String()
}

// ProofRequests is a parsable slice of ProofRequest.
type ProofRequests []*ProofRequest
